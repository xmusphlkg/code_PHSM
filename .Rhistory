geom_rect(data = data.frame(start_date = c(split_date_1),
end_date = c(split_date_2)),
aes(xmin = start_date,
xmax = end_date),
ymin = -Inf,
ymax = Inf,
fill = "#EEB479FF",
alpha = 0.2,
show.legend = F)+
annotate('text',
x = median(c(split_date_1, split_date_2)),
y = 9e5,
label = "PHSMs Periods",
family = "Times New Roman",
vjust = 1,
hjust = 0.5)+
geom_rect(data = data.frame(start_date = c(min(datafile_plot$date)),
end_date = c(split_date_1)),
aes(xmin = start_date,
xmax = end_date),
ymin = -Inf,
ymax = Inf,
fill = "#91D1C2FF",
alpha = 0.2,
show.legend = F)+
annotate('text',
x = median(c(split_date_1, min(datafile_plot$date))),
y = 9e5,
label = "Pre-epidemic Periods",
family = "Times New Roman",
vjust = 1,
hjust = 0.5)+
geom_line(mapping = aes(x = date,
y = value,
color = class))+
scale_color_manual(values = fill_color)+
scale_y_continuous(expand = c(0, 0),
trans = 'log10',
label = scientific_10,
limits = c(1e3, 1e6),
breaks = c(1e3, 1e4, 1e5, 1e6))+
scale_x_date(expand = expansion(add = c(15, 0)),
date_breaks = '1 years',
date_labels = '%Y')+
theme_plot()+
theme(legend.position = 'bottom')+
labs(x = NULL,
y = "Monthly incidence",
color = NULL,
title = 'B')
fig1
fig1 <- ggplot(data = datafile_plot)+
geom_rect(data = data.frame(start_date = split_date_2,
end_date = split_date_3),
aes(xmin = start_date,
xmax = end_date),
ymin = -Inf,
ymax = Inf,
fill = "#E9E29CFF",
alpha = 0.2,
show.legend = F)+
annotate('text',
x = median(c(split_date_2, split_date_3)),
y = 9e5,
label = "Epidemic\nPeriods",
family = "Times New Roman",
vjust = 1,
hjust = 0.5)+
geom_rect(data = data.frame(start_date = c(split_date_1),
end_date = c(split_date_2)),
aes(xmin = start_date,
xmax = end_date),
ymin = -Inf,
ymax = Inf,
fill = "#EEB479FF",
alpha = 0.2,
show.legend = F)+
annotate('text',
x = median(c(split_date_1, split_date_2)),
y = 9e5,
label = "PHSMs Periods",
family = "Times New Roman",
vjust = 1,
hjust = 0.5)+
geom_rect(data = data.frame(start_date = c(min(datafile_plot$date)),
end_date = c(split_date_1)),
aes(xmin = start_date,
xmax = end_date),
ymin = -Inf,
ymax = Inf,
fill = "#91D1C2FF",
alpha = 0.2,
show.legend = F)+
annotate('text',
x = median(c(split_date_1, min(datafile_plot$date))),
y = 9e5,
label = "Pre-epidemic Periods",
family = "Times New Roman",
vjust = 1,
hjust = 0.5)+
geom_line(mapping = aes(x = date,
y = value,
color = class))+
scale_color_manual(values = fill_color)+
scale_y_continuous(expand = c(0, 0),
trans = 'log10',
label = scientific_10,
limits = c(1e3, 1e6),
breaks = c(1e3, 1e4, 1e5, 1e6))+
scale_x_date(expand = expansion(add = c(15, 0)),
date_breaks = '1 years',
date_labels = '%Y')+
theme_plot()+
theme(legend.position = 'bottom')+
labs(x = NULL,
y = "Monthly incidence",
color = NULL,
title = 'B')
fig1
fig1 + fig2 + plot_layout(ncol = 1)
21.5+10+2+0.6+1+1.2
6500*5
21.5+10+2+3.3+0.6+2.2
21.5+10+2+3.3+0.5+2.4
21.5+10+2+3.3+0.5+2.7
21.5+10+2+3.3+0.6+2.7
cl <- makeCluster(26)
# packages ----------------------------------------------------------------
library(tidyverse)
library(openxlsx)
library(jsonlite)
library(stats)
library(tseries)
library(astsa)
library(forecast)
library(greyforecasting)
library(forecastHybrid)
library(caret)
library(bsts)
library(patchwork)
library(Cairo)
library(ggpubr)
library(paletteer)
library(doParallel)
set.seed(202208)
remove(list = ls())
# data load ---------------------------------------------------------------
source('./script/theme_set.R')
source('./script/ggplot.R')
datafile_analysis <- read.xlsx('./data/Nation.xlsx', detectDates = T) %>%
filter(date >= as.Date('2008/1/1'))
split_date <- as.Date("2019/12/1")
train_length <- 12*10
test_length <- 12*2
forcast_length <- 12+12+12+3
scientific_10 <- function(x) {
ifelse(x == 0, 0, parse(text = gsub("[+]", "", gsub("e", "%*%10^", scales::scientific_format()(x)))))
}
disease_list <- c('百日咳', '丙肝', '戊肝', '布病', '登革热',
'肺结核', '风疹', '急性出血性结膜炎', '甲肝',
'痢疾', '淋病', '流行性出血热', '艾滋病',
'流行性腮腺炎', '梅毒', '疟疾', '其它感染性腹泻病',
'伤寒+副伤寒', '乙肝', '手足口病', '猩红热',
'乙型脑炎', '包虫病', '斑疹伤寒')
disease_name <- c('Pertussis', 'HCV', 'HEV',
'Brucellosis', 'Dengue fever', 'Tuberculosis',
'Rubella', 'Acute hemorrhagic conjunctivitis', 'HAV',
'Dysentery', 'Gonorrhea', 'HFRS',
'AIDS', 'Mumps',
'Syphilis', 'Malaria', 'Other infectious diarrhea',
'Typhoid fever and paratyphoid fever', 'HBV', 'HFMD',
'Scarlet fever', 'Japanese encephalitis', 'Hydatidosis', 'Typhus')
# data clean --------------------------------------------------------------
i <- 6
auto_select_function <- function(i){
set.seed(202208)
datafile_single <- datafile_analysis %>%
filter(disease_1 == disease_list[i]) %>%
select(date, disease_1, value) %>%
complete(
date = seq.Date(
from = min(date),
to = max(date),
by = 'month'
),
fill = list(value = 0,
disease_1 = disease_list[i])
)
## simulate date before 2020
df_simu <- datafile_single  %>%
arrange(date) %>%
unique() %>%
filter(date <= split_date)%>%
select(value)
max_case <- max(df_simu)
ts_obse_1 <- df_simu %>%
ts(frequency = 12,
start = c(as.numeric(format(min(datafile_single$date), "%Y")),
as.numeric(format(min(datafile_single$date), "%m"))))
ts_train_1 <- head(ts_obse_1, train_length)
ts_test_1 <- tail(ts_obse_1, test_length)
# NNET --------------------------------------------------------------------
mod <- nnetar(ts_train_1)
outcome <- forecast(mod, h = test_length)
outcome_plot_1 <- data.frame(
date = zoo::as.Date(time(outcome$x)),
simu = as.numeric(as.matrix(outcome$x)),
fit = as.numeric(as.matrix(outcome$fitted))
)
outcome_plot_2 <- data.frame(
date = zoo::as.Date(time(outcome$mean)),
mean = as.matrix(outcome$mean)
)
fit_goodness <- data.frame(
Method = 'Neural Network',
Train = postResample(outcome_plot_1$fit[!is.na(outcome_plot_1$fit)], outcome_plot_1$simu[!is.na(outcome_plot_1$fit)]),
Test = postResample(outcome_plot_2$mean, ts_test_1),
'Train and Test' = postResample(c(outcome_plot_1$fit[-which(is.na(outcome_plot_1$fit))], outcome_plot_2$mean), ts_obse_1[-which(is.na(outcome_plot_1$fit))])
)
fig_nnet_1 <- plot_outcome(
outcome_plot_1,
outcome_plot_2,
datafile_single,
split_date,
max_case,
1,
F,
'Neural Network'
)
rm(mod, outcome, outcome_plot_1, outcome_plot_2)
# ETS ---------------------------------------------------------------------
mod <- ets(ts_train_1)
outcome <- forecast(mod, h=test_length)
outcome_plot_1 <- data.frame(
date = zoo::as.Date(time(outcome$x)),
simu = as.numeric(as.matrix(outcome$x)),
fit = as.numeric(as.matrix(outcome$fitted))
)
outcome_plot_2 <- data.frame(
date = zoo::as.Date(time(outcome$mean)),
mean = as.matrix(outcome$mean),
lower_80 = as.matrix(outcome$lower[,1]),
lower_95 = as.matrix(outcome$lower[,2]),
upper_80 = as.matrix(outcome$upper[,1]),
upper_95 = as.matrix(outcome$upper[,2])
)
fit_goodness <- fit_goodness |>
rbind(
data.frame(
Method = 'ETS',
Train = postResample(outcome_plot_1$simu, outcome_plot_1$fit),
Test = postResample(outcome_plot_2$mean, ts_test_1),
'Train and Test' = postResample(c(outcome_plot_1$fit, outcome_plot_2$mean), ts_obse_1))
)
fig_ets_1 <- plot_outcome(
outcome_plot_1,
outcome_plot_2,
datafile_single,
split_date,
max_case,
2,
T,
'ETS'
)
rm(mod, outcome, outcome_plot_1, outcome_plot_2)
# ARIMA -------------------------------------------------------------------
mod <- auto.arima(ts_train_1, seasonal = F)
outcome <- forecast(mod, h = test_length)
outcome_plot_1 <- data.frame(
date = zoo::as.Date(time(outcome$x)),
simu = as.numeric(as.matrix(outcome$x)),
fit = as.numeric(as.matrix(outcome$fitted))
)
outcome_plot_2 <- data.frame(
date = zoo::as.Date(time(outcome$mean)),
mean = as.matrix(outcome$mean),
lower_80 = as.matrix(outcome$lower[,1]),
lower_95 = as.matrix(outcome$lower[,2]),
upper_80 = as.matrix(outcome$upper[,1]),
upper_95 = as.matrix(outcome$upper[,2])
)
outcome_plot_1_2_link <- data.frame(
date = c(max(outcome_plot_1$date), min(outcome_plot_2$date)),
value = c(outcome_plot_1[nrow(outcome_plot_1), 'fit'],
outcome_plot_2[1, 'mean'])
)
fit_goodness <- fit_goodness |>
rbind(
data.frame(
Method = 'ARIMA',
Train = postResample(outcome_plot_1$fit, outcome_plot_1$simu),
Test = postResample(outcome_plot_2$mean, ts_test_1),
'Train and Test' = postResample(c(outcome_plot_1$fit, outcome_plot_2$mean), ts_obse_1)
)
)
fig_arima_1 <- plot_outcome(
outcome_plot_1,
outcome_plot_2,
datafile_single,
split_date,
max_case,
3,
T,
'ARIMA'
)
rm(mod, outcome, outcome_plot_1, outcome_plot_2)
# SARIMA -------------------------------------------------------------------
mod <- auto.arima(ts_train_1, seasonal = T)
outcome <- forecast(mod, h = test_length)
outcome_plot_1 <- data.frame(
date = zoo::as.Date(time(outcome$x)),
simu = as.numeric(as.matrix(outcome$x)),
fit = as.numeric(as.matrix(outcome$fitted))
)
outcome_plot_2 <- data.frame(
date = zoo::as.Date(time(outcome$mean)),
mean = as.matrix(outcome$mean),
lower_80 = as.matrix(outcome$lower[,1]),
lower_95 = as.matrix(outcome$lower[,2]),
upper_80 = as.matrix(outcome$upper[,1]),
upper_95 = as.matrix(outcome$upper[,2])
)
fit_goodness <- fit_goodness |>
rbind(
data.frame(
Method = 'SARIMA',
Train = postResample(outcome_plot_1$fit, outcome_plot_1$simu),
Test = postResample(outcome_plot_2$mean, ts_test_1),
'Train and Test' = postResample(c(outcome_plot_1$fit, outcome_plot_2$mean), ts_obse_1)
)
)
fig_sarima_1 <- plot_outcome(
outcome_plot_1,
outcome_plot_2,
datafile_single,
split_date,
max_case,
4,
T,
'SARIMA'
)
rm(mod, outcome, outcome_plot_1, outcome_plot_2)
# Mixture ts --------------------------------------------------------------
mod <- hybridModel(ts_train_1,
models = c('aesn'),
a.args = list(seasonal = T),
weights="equal", parallel=TRUE, num.cores = 10)
outcome <- forecast(mod, h = test_length)
outcome_plot_1 <- data.frame(
date = zoo::as.Date(time(outcome$x)),
simu = as.numeric(as.matrix(outcome$x)),
fit = as.numeric(as.matrix(outcome$fitted))
)
outcome_plot_2 <- data.frame(
date = zoo::as.Date(time(outcome$mean)),
mean = as.matrix(outcome$mean),
lower_80 = as.matrix(outcome$lower[,1]),
lower_95 = as.matrix(outcome$lower[,2]),
upper_80 = as.matrix(outcome$upper[,1]),
upper_95 = as.matrix(outcome$upper[,2])
)
fit_goodness <- fit_goodness |>
rbind(
data.frame(
Method = 'Hybrid',
Train = postResample(outcome_plot_1$simu[!is.na(outcome_plot_1$fit)], outcome_plot_1$fit[!is.na(outcome_plot_1$fit)]),
Test = postResample(outcome_plot_2$mean, ts_test_1),
'Train and Test' = postResample(c(outcome_plot_1$fit[-which(is.na(outcome_plot_1$fit))], outcome_plot_2$mean), ts_obse_1[-which(is.na(outcome_plot_1$fit))]))
)
fig_hyb_1 <- plot_outcome(
outcome_plot_1,
outcome_plot_2,
datafile_single,
split_date,
max_case,
5,
T,
'Hybrid'
)
rm(mod, outcome, outcome_plot_1)
# Bayesian --------------------------------------------------------------
ss <- AddLocalLinearTrend(list(), ts_train_1)
ss <- AddSeasonal(ss, ts_train_1, nseasons = 12)
mod <- bsts(ts_train_1, state.specification = ss, niter = 500, seed = 20231007)
burn <- SuggestBurn(0.1, mod)
outcome <- predict.bsts(mod, horizon = test_length, burn = burn, quantiles = c(0.025, 0.1, 0.9, 0.975))
outcome_plot_1 <- data.frame(
date = zoo::as.Date(time(ts_train_1)),
simu = as.numeric(ts_train_1),
fit = as.numeric(-colMeans(mod$one.step.prediction.errors[-(1:burn),])+ts_train_1)
)
outcome_plot_2 <- data.frame(
date = outcome_plot_2$date,
mean = outcome$mean,
lower_80 = outcome$interval[2,],
lower_95 = outcome$interval[1,],
upper_80 = outcome$interval[3,],
upper_95 = outcome$interval[4,]
)
fit_goodness <- fit_goodness |>
rbind(
data.frame(
Method = 'Bayesian Structural',
Train = postResample(outcome_plot_1$simu[!is.na(outcome_plot_1$fit)], outcome_plot_1$fit[!is.na(outcome_plot_1$fit)]),
Test = postResample(outcome_plot_2$mean, ts_test_1),
'Train and Test' = postResample(c(outcome_plot_1$fit, outcome_plot_2$mean), ts_obse_1)
)
)
fig_baye_1 <- plot_outcome(
outcome_plot_1,
outcome_plot_2,
datafile_single,
split_date,
max_case,
6,
T,
'Bayesian Structural'
)
rm(mod, outcome, outcome_plot_1, outcome_plot_2)
# summary table ---------------------------------------------------------
datafile_table <- fit_goodness |>
mutate(Method = factor(Method,
levels = c('Neural Network', 'ETS',
'ARIMA', 'SARIMA', 'Hybrid', 'Bayesian Structural'),
labels = c('Neural Network', 'ETS',
'ARIMA', 'SARIMA', 'Hybrid*', 'Bayesian Structural')),
Train = round(Train, 2),
Test = round(Test, 2),
Train.and.Test = round(Train.and.Test, 2)) |>
arrange(Method)
datafile_table[is.na(datafile_table)] <- ""
datafile_table$Index <- str_remove_all(rownames(datafile_table), "[0-9]+")
table1 <- ggtexttable(datafile_table[datafile_table$Index == "RMSE", 1:4],
rows = NULL,
cols = c('Method', 'Train', 'Test', 'Train and Test'),
theme = ttheme("blank", base_size = 10, padding = unit(c(5, 5), "mm"))) |>
tab_add_hline(at.row = nrow(datafile_table)/3+1, row.side = "bottom", linewidth = 1) |>
tab_add_hline(at.row = 1:2, row.side = "top", linewidth = 2) |>
tab_add_title(paste0(LETTERS[8], " : RMSE of Models"), face = "bold", size = 14) |>
tab_add_footnote('*Hybrid: Combined SARIMA, ETS, STL\nand Neural Network model',
just = "left",hjust = 1,size = 10)
table2 <- ggtexttable(datafile_table[datafile_table$Index == "Rsquared", 1:4],
rows = NULL,
cols = c('Method', 'Train', 'Test', 'Train and Test'),
theme = ttheme("blank", base_size = 10, padding = unit(c(5, 5), "mm"))) |>
tab_add_hline(at.row = nrow(datafile_table)/3+1, row.side = "bottom", linewidth = 1) |>
tab_add_hline(at.row = 1:2, row.side = "top", linewidth = 2) |>
tab_add_title(paste0(LETTERS[9], " : R-squared of Models"), face = "bold", size = 14) |>
tab_add_footnote('*Hybrid: Combined SARIMA, ETS, STL\nand Neural Network model',
just = "left",hjust = 1,size = 10)
table3 <- ggtexttable(datafile_table[datafile_table$Index == "MAE", 1:4],
rows = NULL,
cols = c('Method', 'Train', 'Test', 'Train and Test'),
theme = ttheme("blank", base_size = 10, padding = unit(c(5, 5), "mm"))) |>
tab_add_hline(at.row = nrow(datafile_table)/3+1, row.side = "bottom", linewidth = 1) |>
tab_add_hline(at.row = 1:2, row.side = "top", linewidth = 2) |>
tab_add_title(paste0(LETTERS[10], " : MAE of Models"), face = "bold", size = 14) |>
tab_add_footnote('*Hybrid: Combined SARIMA, ETS, STL\nand Neural Network model',
just = "left",hjust = 1,size = 10)
fig_table <- table1 + table2 + table3 +
plot_layout(ncol = 3)
# fig_com <- fig1 + table + plot_layout(widths = c(1.7, 1))
# save --------------------------------------------------------------------
fig_ts <- fig_nnet_1 + fig_ets_1 + fig_arima_1 + fig_sarima_1 + fig_hyb_1+ fig_baye_1 +
plot_layout(ncol = 2, guides = 'collect')&
theme(legend.position = 'bottom',
plot.margin = margin(5, 15, 5, 5))
fig <- cowplot::plot_grid(fig_ts, fig_table, ncol = 1, rel_heights = c(3, 1))
ggsave(filename = paste0('./outcome/appendix/figure/', disease_name[i],'.pdf'),
fig,
width = 14, height = 15, family = "Times New Roman",
limitsize = FALSE, device = cairo_pdf)
fit_goodness$disease <- disease_name[i]
return(fit_goodness)
}
# run model ---------------------------------------------------------------
i <- 6
# lapply(1:26, auto_select_function)
# auto_select_function(6)
cl <- makeCluster(26)
registerDoParallel(cl)
clusterEvalQ(cl, {
library(tidyverse)
library(openxlsx)
library(jsonlite)
library(stats)
library(tseries)
library(astsa)
library(forecast)
library(greyforecasting)
library(forecastHybrid)
library(caret)
library(bsts)
library(patchwork)
library(Cairo)
library(ggpubr)
library(paletteer)
set.seed(202208)
split_date <- as.Date("2019/12/1")
train_length <- 12*10
test_length <- 12*2
forcast_length <- 12+12+12+3
})
clusterExport(cl, c('datafile_analysis', 'disease_list', 'disease_name',
'fill_color', 'postResample', 'theme_set',
'scientific_10', 'plot_outcome'),
envir = environment())
outcome <- parLapply(cl, 1:24, auto_select_function)
stopCluster(cl)
datafile_outcome <- do.call('rbind', outcome)
write.xlsx(datafile_outcome, './outcome/appendix/model/index/pre-epidemic.xlsx')
write.xlsx(datafile_outcome, './outcome/appendix/model/index/pre-epidemic.xlsx')
